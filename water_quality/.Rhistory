str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
install.packages('ipred')
library(ipred)
mypredict.lr <- function(object, newdata) asfactor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
install.packages('rpart')
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
ionosphere_tm <- rpart(Radar_return ~. data=ionosphere)
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
knitr::opts_chunk$set(echo = TRUE)
seeds <- read.csv("seeds.csv")
str(seeds)
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- asfactor(seeds$Variety)
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
seeds.tm <- rpart(Variety ~., data=seeds)
rpart.plot(seeds.tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~., data=ionosphere, ntree=2000)
plot(ionosphere.rf)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
seeds.tm <- rpart(Variety ~., data=seeds)
rpart.plot(seeds.tm)
knitr::opts_chunk$set(echo = TRUE)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~ ., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
knitr::opts_chunk$set(echo = TRUE)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~ ., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
install.packages("tidyverse")
install.packages("magrittr")
install.packages("purrr")
install.packages("glue")
install.packages("stringr")
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html()
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
library(rvest)
library(xml2)
library(polite)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html()
url %>%
read_html() %>%
html_nodes(".title-collection")
url %>%
read_html() %>%
html_nodes(".title-collection") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".title-caption") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile tile-tab medium-tile cyan-dark-tile") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile tile-tab medium-tile cyan-dark-tile") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".title-caption") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".title-collection") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".title-collection .tile") %>%
html_attr(href)
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".title-collection .tile") %>%
html_text()
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".title-collection") %>%
html_text()
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".tile-caption") %>%
html_text()
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".tile-collection") %>%
html_text()
url %>%
html_nodes(".tile-collection") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_attr("href")
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region %<>%
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region
url %>%
html_nodes(".tile-caption > h6") %>%
html_text()
url %>%
html_nodes(".tile-caption > h6")
url %>%
read_html() %>%
html_nodes(".tile-caption > h6")
url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
water_quality
water_quality <- tibble(Region = region, Link = region_href)
water_quality
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("purrr")
# install.packages("glue")
# install.packages("stringr")
library(tidyverse)
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("purrr")
# install.packages("glue")
# install.packages("stringr")
library(tidyverse)
library(magrittr)
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("purrr")
# install.packages("glue")
# install.packages("stringr")
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
library(rvest)
library(xml2)
library(polite)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html() %>%
html_structure()
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
type <- tibble(Type = c("lakes", "river-quality"))
type
test <- glue("https://www.lawa.org.nz{link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{Link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type[1]}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type}")
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test
test <- glue("https://www.lawa.org.nz{water_quality$Link}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test <- glue("https://www.lawa.org.nz{water_quality$Link}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text() %>%
gsub(" region")
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
region <- gsub(" region","", region)
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
water_quality <- tibble(Region = region, Link = region_href)
water_quality
area %<>% html_nodes(test, '.box-detail > h6') %>% html_text()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes/{area[1]}")
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes/{area[1]}") %>%
read_html()
area <- tibble(Area=area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes/{area[1]}") %>%
read_html()
area <- tibble(Area=area)
area
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}") %>%
read_html()
area <- tibble(Area = area)
area
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}") %>%
read_html()
test
read_html()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test
area <- gsub(" ", "-", area$Area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
area <- gsub(" ", "-", area$Area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{Area[1]}")
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")
test
read_html()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")%>%
read_html()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")%>%
read_html() %>%
html_text()
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")%>%
read_html() %>%
html_structure()
water_quality
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}/{area[1]}")%>%
read_html()
test
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
library(rvest)
library(xml2)
library(polite)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html() %>%
html_structure()
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region <- gsub(" region","", region)
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
type <- tibble(Type = c("lakes", "river-quality"))
type
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
area <- gsub(" ", "-", area$Area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}/{area[1]}")%>%
read_html()
test
setwd("~/Desktop/code_work/data201_gp/water_quality")
# Load packages such as ggplot2, dplyr, tidyr, and readr to be able to use specialised functions for creating
# visualisations, reading, writing, and manipulating data.
library(tidyverse)
# Load the tidygeocoder package to be able to use a function to convert the given latitude and longitude
# to address.
library(tidygeocoder)
# Load the readxl package to be able to use a function to read Excel files.
library(readxl)
library(skimr)
library(knitr)
library(visdat)
library(lubridate)
# Load 'new_river_ecoli.csv' data
river_ecoli <- read_csv("new_river_ecoli.csv")
river_ecoli %>%
vis_miss()
# Select columns we need and discard rest of them.
new_river_ecoli <- river_ecoli %>%
select(Region = state, Year = end_year, Measure = measure, Median = median,
Units = units)
# Check any NAs present in this data set.
new_river_ecoli %>%
vis_miss()
new <- new_river_ecoli %>%
group_by(Region, Year) %>%
summarise(Indicator = Measure, Value = sum(round(Median,2))) %>%
unique() %>%
filter(Year >= 2002, Year <= 2019) %>%
spread(key = Region,
value = Value)
new2 <- new_river_ecoli %>%
group_by(Region, Year) %>%
summarise(Indicator = Measure, Value = sum(round(Median,2))) %>%
unique() %>%
filter(Year >= 2002, Year <= 2019) %>%
spread(key = Indicator,
value = Value)
View(new2)
View(new)
