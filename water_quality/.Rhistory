ionosphere.glm <- glm(Radar_return ~., data=ionosphere, ntree=tree_number)
ionosphere.glm <- glm(Radar_return ~., family=binomial(link="logit"), data=ionosphere)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
install.packages('ipred')
library(ipred)
mypredict.lr <- function(object, newdata) asfactor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
install.packages('rpart')
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
knitr::opts_chunk$set(echo = TRUE)
library(rpart)
ionosphere_tm <- rpart(Radar_return ~. data=ionosphere)
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
knitr::opts_chunk$set(echo = TRUE)
seeds <- read.csv("seeds.csv")
str(seeds)
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- asfactor(seeds$Variety)
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
seeds.tm <- rpart(Variety ~., data=seeds)
rpart.plot(seeds.tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~., data=ionosphere, ntree=2000)
plot(ionosphere.rf)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
seeds.tm <- rpart(Variety ~., data=seeds)
rpart.plot(seeds.tm)
knitr::opts_chunk$set(echo = TRUE)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~ ., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
knitr::opts_chunk$set(echo = TRUE)
ionosphere <- read.csv("ionosphere.csv")
str(ionosphere)
ionosphere$Radar_return <- as.factor(ionosphere$Radar_return)
ionosphere.glm <- glm(Radar_return ~ ., family=binomial(link="logit"), data=ionosphere)
library(regclass)
confusion_matrix(ionosphere.glm)
library(ipred)
mypredict.lr <- function(object, newdata) as.factor(ifelse(predict(object, newdata = newdata, type="response") > 0.5, "good", "bad"))
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=glm, estimator="cv", predict=mypredict.lr, est.para=control.errorest(k=5), family=binomial(link="logit"))
library(rpart)
ionosphere_tm <- rpart(Radar_return ~., data=ionosphere)
library(rpart.plot)
rpart.plot(ionosphere_tm)
library(randomForest)
set.seed(0)
ionosphere.rf <- randomForest(Radar_return ~ ., data=ionosphere, ntree=1000)
plot(ionosphere.rf)
myrpredict <- function(object, newdata) predict(object, newdata, type="class")
set.seed(0)
errorest(Radar_return ~ ., data=ionosphere, model=rpart, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
errorest(Radar_return ~ ., data=ionosphere, model=randomForest, predict=myrpredict, estimator="cv", est.para=control.errorest(k=5))
seeds <- read.csv("seeds.csv")
str(seeds)
seeds$Variety <- as.factor(seeds$Variety)
install.packages("tidyverse")
install.packages("magrittr")
install.packages("purrr")
install.packages("glue")
install.packages("stringr")
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html()
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
library(rvest)
library(xml2)
library(polite)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html()
url %>%
read_html() %>%
html_nodes(".title-collection")
url %>%
read_html() %>%
html_nodes(".title-collection") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".title-caption") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile tile-tab medium-tile cyan-dark-tile") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile tile-tab medium-tile cyan-dark-tile") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".title-caption") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".title-collection") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".title-collection .tile") %>%
html_attr(href)
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".title-collection .tile") %>%
html_text()
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".title-collection") %>%
html_text()
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".tile-caption") %>%
html_text()
url %>%
read_html() %>%
html_structure()%>%
html_nodes(".tile-collection") %>%
html_text()
url %>%
html_nodes(".tile-collection") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_attr(href)
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_attr("href")
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile") %>%
html_text()
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region %<>%
url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region
url %>%
html_nodes(".tile-caption > h6") %>%
html_text()
url %>%
html_nodes(".tile-caption > h6")
url %>%
read_html() %>%
html_nodes(".tile-caption > h6")
url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
water_quality
water_quality <- tibble(Region = region, Link = region_href)
water_quality
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("purrr")
# install.packages("glue")
# install.packages("stringr")
library(tidyverse)
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("purrr")
# install.packages("glue")
# install.packages("stringr")
library(tidyverse)
library(magrittr)
# install.packages("tidyverse")
# install.packages("magrittr")
# install.packages("purrr")
# install.packages("glue")
# install.packages("stringr")
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
library(rvest)
library(xml2)
library(polite)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html() %>%
html_structure()
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
type <- tibble(Type = c("lakes", "river-quality"))
type
test <- glue("https://www.lawa.org.nz{link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{Link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type[1]}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type}") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/{type}")
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6')
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test
test <- glue("https://www.lawa.org.nz{water_quality$Link}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test <- glue("https://www.lawa.org.nz{water_quality$Link}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html() %>%
html_nodes('.box-detail > h6') %>% html_text()
test
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text() %>%
gsub(" region")
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
region <- gsub(" region","", region)
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
water_quality <- tibble(Region = region, Link = region_href)
water_quality
area %<>% html_nodes(test, '.box-detail > h6') %>% html_text()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes/{area[1]}")
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes/{area[1]}") %>%
read_html()
area <- tibble(Area=area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes/{area[1]}") %>%
read_html()
area <- tibble(Area=area)
area
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}") %>%
read_html()
area <- tibble(Area = area)
area
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}") %>%
read_html()
test
read_html()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test
area <- gsub(" ", "-", area$Area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
area <- gsub(" ", "-", area$Area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area$Area[1]}")
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{Area[1]}")
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")
test
read_html()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")%>%
read_html()
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")%>%
read_html() %>%
html_text()
test
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}")%>%
read_html() %>%
html_structure()
water_quality
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}/{area[1]}")%>%
read_html()
test
library(tidyverse)
library(magrittr)
library(purrr)
library(glue)
library(stringr)
library(rvest)
library(xml2)
library(polite)
url <- "https://www.lawa.org.nz/explore-data/#/tb-region"
url %>%
read_html() %>%
html_structure()
region <- url %>%
read_html() %>%
html_nodes(".tile-caption > h6") %>%
html_text()
region <- gsub(" region","", region)
region_href <- url %>%
read_html() %>%
html_nodes(".tile.tile-tab.medium-tile.cyan-dark-tile > a") %>%
html_attr("href")
region_href
water_quality <- tibble(Region = region, Link = region_href)
water_quality
type <- tibble(Type = c("lakes", "river-quality"))
type
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}/lakes") %>%
read_html()
area <- html_nodes(test, '.box-detail > h6') %>% html_text()
area <- tibble(Area = area)
area
area <- gsub(" ", "-", area$Area)
test <- glue("https://www.lawa.org.nz{water_quality$Link[1]}lakes/{area[1]}/{area[1]}")%>%
read_html()
test
setwd("~/Desktop/code_work/data201_gp/water_quality")
library(tidygeocoder)
library(tidyverse)
# read the three datasets for use
groundwater <- read_csv("groundwater_quality.csv")
river_ecoli <- read_csv("new_river_ecoli.csv")
river_nitrogen <- read_csv("new_river_nitrogen.csv")
# # takes the river_ecoli dataset then take the lat and long variables
# # to get the full address. Then save it as new_riverecoli.
# new_riverecoli <- river_ecoli %>%
#   reverse_geocode(lat = lat, long = long,
#                   method = "osm", full_results = TRUE)
#
# # takes the river_ecoli dataset then take the lat and long variables
# # to get the full address. Then save it as new_rivernitrogen.
# new_rivernitrogen <- river_nitrogen %>%
#   reverse_geocode(lat = lat, long = long,
#                   method = "osm", full_results = TRUE)
#
# # write the new dataset as CSVs for use
# write_csv(new_riverecoli, "new_river_ecoli.csv")
# write_csv(new_rivernitrogen, "new_river_nitrogen.csv")
groundwater_mod <- groundwater %>%
select(region, measure, median, units, lower_confidence_level, upper_confidence_level, direction_confidence_lawa) %>%
filter(measure %in% c("Nitrate nitrogen", "E.coli")) %>%
group_by(region, measure) %>%
#summarise(Median = sum(median), Units = units, Lower_CI = lower_confidence_level, Upper_CI = upper_confidence_level, Direction_confidence = direction_confidence_lawa)
summarise(Median = sum(median), Units = units) %>%
unique()
groundwater_mod
groundwater_mod_1 <- groundwater_mod %>%
spread(key = region,
value = Median)
groundwater_mod_1
View(groundwater)
View(river_ecoli)
